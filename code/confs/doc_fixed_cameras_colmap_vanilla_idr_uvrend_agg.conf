train{
    expname = doc_fixed_cameras_vanillaidr_colmap_uvdoc3dfwd_uvrend_nips
    dataset_class = datasets.doc_colmap_dataset.DocDataset
    model_class = model.implicit_differentiable_renderer.IDRUVRendNetwork
    loss_class = model.loss.IDRUVColmapLoss
    learning_rate = 5.0e-6
    num_pixels = 2048
    plot_freq = 10
    alpha_milestones = [4000,8000,6000] #in terms of iters aggressive
    alpha_factor = 2
    sched_milestones = [16000,24000]# in terms of iters
    sched_factor = 0.5 
    fwd_wt_milestones = [8000,] # in terms of iters 
    fwd_wt_factor = [0.001] 
    bwd_wt_milestones= [1600, 3200, 4800, 6400, 8000, 9600, 11200, 12800, 14400, 16000, 20000, 25000, 30000, 35000, 40000] # in terms of iters more aggressive setting 2 for faster training schedule and backward init with a plane 
    bwd_wt_factor = [0.002, 0.004, 0.006, 0.008, 0.01, 0.02, 0.04, 0.06, 0.08, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0] # more aggressive setting 2 for faster training schedule and backward init with a plane 
    grad_clip_milestones=[0,15000,22500,30000,70000]
    grad_clip_factor=[0.2, 0.8, 0.2, 0.4, 0.8]
    grad_clip=0.001 # use it during initial isometry training otherwise isometry loss destroys the shape, only applies to the implicit network
    unfreeze_fwd=0
    freeze_sdf=False
}
plot{
    plot_nimgs = 1
    max_depth = 5.0
    resolution = 100
}

loss{
    eikonal_weight = 0.1
    mask_weight = 100.0
    alpha = 50.0
    lipschitz_const = 0.0
    lipschitz_weight=0.0
    lipschitz_points=random
    lipschitz_mode=max
    apply_normal_loss=False
    normal_weight=0.1
    radius=10
    fwd_weight=0.001
    bwd_weight=0.001 # more aggressive setting 2 for faster training schedule and backward init with a plane 
    bwd_mode=l2
    pnorm=1.0
    delD=0.1
    rgbcyc_weight=0.0
    isom_mode=scisom
    isom_weight=[0.1,0.1,0.1]    # E, F, G 
}


dataset{
    data_dir = paper3
    img_res = [448,448]
    tex_res= [448, 448]
    scan_id = -1
    imp_map=False # set to true if using weighted backward loss
    # mode='nerf' # required for video
}
model{
    feature_vector_size = 256
    train_backward=True
    backprop_fwd=True #rendering network jointly optimizes the uvfield and sdf so this flag must be true
    joint_backward=True
    normalize=False
    uv_inp=False
    transform=False
    fixed_transform=True
    isometry=True
    implicit_network
    {
        d_in = 3
        d_out = 1
        dims = [128, 128, 128, 128, 128, 128, 128, 128]
        geometric_init = True
        bias = 0.4
        skip_in = [4]
        weight_norm = True
        multires = 6
        act= softp
    }
    rendering_network
    {
        mode = idr
        d_in = 11
        d_out = 3
        dims = [512, 512, 512, 512]
        weight_norm = False
        multires_view = 4
        act=sine
        sine_factor=10
    }
    
    forward_network
    {
        input_feat_size=0                 # if global features are used
        d_in=3                              # x,y,z
        d_out=2                             # u,v
        dims=[512,512,512,512,512,512]      # hidden dimensions
        act=sine                            # inner_activations
        out_act=htan
        norm=None                           # per layer norm
        multires=10                         # dimensions of fourier features 
        bias=True
    }
    
    backward_network
    {
        input_feat_size=0                   # if global features are used
        d_in=2                              # x,y,z
        d_out=3                             # u,v
        dims=[512,512,512,512,512,512]              # hidden dimensions
        act=sine                            # activations
        out_act=None
        norm=None                           # per layer norm
        multires=10                          # dimensions of fourier features 
        bias=True
        sine_factor=30
    }

    ray_tracer
    {
        object_bounding_sphere = 1.5
        sdf_threshold = 5.0e-5
        line_search_step = 0.1
        line_step_iters = 3
        sphere_tracing_iters = 10
        n_steps = 100
        n_secant_steps = 8
    }
}