train{
    expname = doc_fixed_cameras_vanillaidr_colmap_uvdoc3dfwd_uvrend_nips
    dataset_class = datasets.doc_colmap_dataset.DocDataset
    model_class = model.implicit_differentiable_renderer.IDRUVRendNetwork
    loss_class = model.loss.IDRUVColmapLoss
    learning_rate = 5.0e-6
    # fblearning_rate = 1.0e-5
    num_pixels = 2048
    plot_freq = 10
    # alpha_milestones = [3000,6000,9000]
    alpha_milestones = [1500,3000,4500]
    alpha_factor = 2
    # sched_milestones = [4000,8000]
    sched_milestones = [2000,4000]
    sched_factor = 0.5 
    fwd_wt_milestones = [1000,]
    fwd_wt_factor = [0.001] 
    # bwd_wt_milestones= [5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000]#[1000, 2000, 3000, 4000, 5000, 6000, 7000]
    bwd_wt_milestones= [ 1000, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 6000, 7000, 8000, 12000,14000, 25000]#[1000, 2000, 3000, 4000, 5000, 6000, 7000]
    bwd_wt_factor = [0.0002, 0.0004, 0.0008, 0.001, 0.001, 0.001, 0.001, 0.001, 0.004, 0.006,0.01, 0.1, 0.02,1.0]
}
plot{
    plot_nimgs = 1
    max_depth = 5.0
    resolution = 100
}
loss{
    eikonal_weight = 0.1
    mask_weight = 100.0
    alpha = 50.0
    lipschitz_const = 0.0
    lipschitz_weight=0.0
    lipschitz_points=random
    lipschitz_mode=max
    apply_normal_loss=False
    normal_weight=0.1
    radius=10
    fwd_weight=0.001
    bwd_weight=0.0001
    bwd_mode=wl2
    pnorm=1.0
    delD=0.1
    rgbcyc_weight=0.0
    isom_mode=scisom
    isom_weight=[0.01,0.01,0.01]    # E, F, G
    # isom_weight=[0.1,0.1,0.1]    # E, F, G # for paper1
}

dataset{
    data_dir = paper2 #receipt #Data1 #1_35_4-gm_Page_021-QB5
    img_res = [448,448]#[448, 448]#[796,448] #[448, 597] #[448,336]
    tex_res= [448, 448]
    scan_id = -1
    imp_map=True # set to true if using weighted backward loss
}
model{
    feature_vector_size = 256
    train_backward=True
    backprop_fwd=True #rendering network jointly optimizes the uvfield and sdf so this flag must be true
    joint_backward=True
    normalize=False
    uv_inp=False
    transform=False
    fixed_transform=True
    isometry=True
    implicit_network
    {
        d_in = 3
        d_out = 1
        dims = [128, 128, 128, 128, 128, 128, 128, 128]
        geometric_init = True
        bias = 0.4
        skip_in = [4]
        weight_norm = True
        multires = 6
        act= softp
    }
    rendering_network
    {
        mode = idr
        d_in = 11
        d_out = 3
        dims = [512, 512, 512, 512]
        weight_norm = False
        multires_view = 4
        act=sine
        sine_factor=10
    }
    
    forward_network
    {
        input_feat_size=0                 # if global features are used
        d_in=3                              # x,y,z
        d_out=2                             # u,v
        dims=[512,512,512,512,512,512]      # hidden dimensions
        act=sine                            # inner_activations
        out_act=htan
        norm=None                           # per layer norm
        multires=10                         # dimensions of fourier features 
        bias=True
    }
    
    backward_network
    {
        input_feat_size=0                   # if global features are used
        d_in=2                              # x,y,z
        d_out=3                             # u,v
        dims=[512,512,512,512,512,512]              # hidden dimensions
        act=sine                            # activations
        out_act=None
        norm=None                           # per layer norm
        multires=10                          # dimensions of fourier features 
        bias=True
        sine_factor=30
    }

    ray_tracer
    {
        object_bounding_sphere = 1.5
        sdf_threshold = 5.0e-5
        line_search_step = 0.1
        line_step_iters = 3
        sphere_tracing_iters = 10
        n_steps = 100
        n_secant_steps = 8
    }
}